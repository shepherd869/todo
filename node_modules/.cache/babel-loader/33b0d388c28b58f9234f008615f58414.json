{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Greg\\\\todo\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport \"./App.css\";\n/*\n    Class components have built-in state, but functional componets are stateless.\n\n    React hooks are functions that allow you to \"hook\" into React state and lifecycle features \n    from function components.\n    useState is one of those built-in \"hooks\". Others are useEffect, useContext, use Reducer, useMemo, etc.\n\n    https://reactjs.org/docs/hooks-intro.html\n    https://reactjs.org/docs/hooks-reference.html\n*/\n\nfunction App() {\n  /*\n      Creating our state with default todos: \n      (todos is the value that holds the state object and setTodos is the function that will update it)\n      You cannot update state directly, only with the setTodos function you define.\n  */\n  const [todos, setTodos] = useState([{\n    text: \"Learn about React\",\n    isCompleted: false\n  }, {\n    text: \"Meet friend for lunch\",\n    isCompleted: false\n  }, {\n    text: \"Build really cool todo app\",\n    isCompleted: false\n  }]);\n  /*\n      Functions to add, update and remove a todo:\n      We are using the spread operator [...] to make a copy of our todos array and then update it.\n      We cannot directly manipulate our todos object, so we replace our exisiting array of todos with a new one.\n  */\n\n  const addTodo = text => {\n    const newTodos = [...todos, {\n      text\n    }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }; // note: map function is used to iterate through todos array. Each item in array needs a \"key\" (using index)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, todos.map((todo, index) => /*#__PURE__*/React.createElement(Todo, {\n    key: index,\n    index: index,\n    todo: todo,\n    completeTodo: completeTodo,\n    removeTodo: removeTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TodoForm, {\n    addTodo: addTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Greg/todo/src/App.js"],"names":["React","useState","TodoForm","Todo","App","todos","setTodos","text","isCompleted","addTodo","newTodos","completeTodo","index","removeTodo","splice","map","todo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,WAAP;AAEA;;;;;;;;;;;AAYA,SAASC,GAAT,GAAe;AAEb;;;;;AAMG,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CACpC;AACEM,IAAAA,IAAI,EAAE,mBADR;AAEEC,IAAAA,WAAW,EAAE;AAFf,GADoC,EAKpC;AACED,IAAAA,IAAI,EAAE,uBADR;AAEEC,IAAAA,WAAW,EAAE;AAFf,GALoC,EASpC;AACED,IAAAA,IAAI,EAAE,4BADR;AAEEC,IAAAA,WAAW,EAAE;AAFf,GAToC,CAAD,CAAlC;AAeH;;;;;;AAMA,QAAMC,OAAO,GAAGF,IAAI,IAAI;AACtB,UAAMG,QAAQ,GAAG,CAAC,GAAGL,KAAJ,EAAW;AAAEE,MAAAA;AAAF,KAAX,CAAjB;AACAD,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAMF,QAAQ,GAAG,CAAC,GAAGL,KAAJ,CAAjB;AACAK,IAAAA,QAAQ,CAACE,KAAD,CAAR,CAAgBJ,WAAhB,GAA8B,IAA9B;AACAF,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACD,GAJD;;AAMA,QAAMG,UAAU,GAAGD,KAAK,IAAI;AAC1B,UAAMF,QAAQ,GAAG,CAAC,GAAGL,KAAJ,CAAjB;AACAK,IAAAA,QAAQ,CAACI,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;AACAN,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACD,GAJD,CAxCa,CA8Cb;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOJ,KAAP,kBACT,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,KAAK,EAAEA,KAFT;AAGE,IAAA,IAAI,EAAEI,IAHR;AAIE,IAAA,YAAY,EAAEL,YAJhB;AAKE,IAAA,UAAU,EAAEE,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,eAUE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEJ,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF,CADF;AAgBD;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nimport \"./App.css\";\n\n/*\n    Class components have built-in state, but functional componets are stateless.\n\n    React hooks are functions that allow you to \"hook\" into React state and lifecycle features \n    from function components.\n    useState is one of those built-in \"hooks\". Others are useEffect, useContext, use Reducer, useMemo, etc.\n\n    https://reactjs.org/docs/hooks-intro.html\n    https://reactjs.org/docs/hooks-reference.html\n*/\n\n\nfunction App() {\n\n  /*\n      Creating our state with default todos: \n      (todos is the value that holds the state object and setTodos is the function that will update it)\n      You cannot update state directly, only with the setTodos function you define.\n  */\n\n     const [todos, setTodos] = useState([\n    {\n      text: \"Learn about React\",\n      isCompleted: false\n    },\n    {\n      text: \"Meet friend for lunch\",\n      isCompleted: false\n    },\n    {\n      text: \"Build really cool todo app\",\n      isCompleted: false\n    }\n  ]);\n\n  /*\n      Functions to add, update and remove a todo:\n      We are using the spread operator [...] to make a copy of our todos array and then update it.\n      We cannot directly manipulate our todos object, so we replace our exisiting array of todos with a new one.\n  */\n  \n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  // note: map function is used to iterate through todos array. Each item in array needs a \"key\" (using index)\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}