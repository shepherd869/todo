{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Greg\\\\todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\Greg\\\\todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import TodoForm from'./TodoForm';import Todo from'./Todo';import\"./App.css\";/*\n    Class components have built-in state, but functional componets are stateless.\n\n    React hooks are functions that allow you to \"hook\" into React state and lifecycle features \n    from function components.\n    useState is one of those built-in \"hooks\". Others are useEffect, useContext, use Reducer, useMemo, etc.\n\n    https://reactjs.org/docs/hooks-intro.html\n    https://reactjs.org/docs/hooks-reference.html\n*/function App(){/*\n      Creating our state with default todos: \n      (todos is the value that holds the state object and setTodos is the function that will update it)\n      You cannot update state directly, only with the setTodos function you define.\n  */var _useState=useState([{text:\"Learn about React\",isCompleted:false},{text:\"Meet friend for lunch\",isCompleted:false},{text:\"Build really cool todo app\",isCompleted:false}]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];/*\n      Functions to add, update and remove a todo:\n      We are using the spread operator [...] to make a copy of our todos array and then update it.\n      We cannot directly manipulate our todos object, so we replace our exisiting array of todos with a new one.\n  */var addTodo=function addTodo(text){var newTodos=[].concat(_toConsumableArray(todos),[{text:text}]);setTodos(newTodos);};var completeTodo=function completeTodo(index){var newTodos=_toConsumableArray(todos);newTodos[index].isCompleted=true;setTodos(newTodos);};var removeTodo=function removeTodo(index){var newTodos=_toConsumableArray(todos);newTodos.splice(index,1);setTodos(newTodos);};// note: map function is used to iterate through todos array. Each item in array needs a \"key\" (using index)\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(\"div\",{className:\"todo-list\"},todos.map(function(todo,index){return/*#__PURE__*/React.createElement(Todo,{key:index,index:index,todo:todo,completeTodo:completeTodo,removeTodo:removeTodo});}),/*#__PURE__*/React.createElement(TodoForm,{addTodo:addTodo})));}export default App;","map":{"version":3,"sources":["C:/Users/Greg/todo/src/App.js"],"names":["React","useState","TodoForm","Todo","App","text","isCompleted","todos","setTodos","addTodo","newTodos","completeTodo","index","removeTodo","splice","map","todo"],"mappings":"0SAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA,MAAO,WAAP,CAEA;;;;;;;;;EAYA,QAASC,CAAAA,GAAT,EAAe,CAEb;;;;IAFa,cAQgBH,QAAQ,CAAC,CACpC,CACEI,IAAI,CAAE,mBADR,CAEEC,WAAW,CAAE,KAFf,CADoC,CAKpC,CACED,IAAI,CAAE,uBADR,CAEEC,WAAW,CAAE,KAFf,CALoC,CASpC,CACED,IAAI,CAAE,4BADR,CAEEC,WAAW,CAAE,KAFf,CAToC,CAAD,CARxB,wCAQHC,KARG,eAQIC,QARJ,eAuBb;;;;IAMA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAJ,IAAI,CAAI,CACtB,GAAMK,CAAAA,QAAQ,8BAAOH,KAAP,GAAc,CAAEF,IAAI,CAAJA,IAAF,CAAd,EAAd,CACAG,QAAQ,CAACE,QAAD,CAAR,CACD,CAHD,CAKA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAC5B,GAAMF,CAAAA,QAAQ,oBAAOH,KAAP,CAAd,CACAG,QAAQ,CAACE,KAAD,CAAR,CAAgBN,WAAhB,CAA8B,IAA9B,CACAE,QAAQ,CAACE,QAAD,CAAR,CACD,CAJD,CAMA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAD,KAAK,CAAI,CAC1B,GAAMF,CAAAA,QAAQ,oBAAOH,KAAP,CAAd,CACAG,QAAQ,CAACI,MAAT,CAAgBF,KAAhB,CAAuB,CAAvB,EACAJ,QAAQ,CAACE,QAAD,CAAR,CACD,CAJD,CAMA;AACA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,WAAf,EACGH,KAAK,CAACQ,GAAN,CAAU,SAACC,IAAD,CAAOJ,KAAP,qBACT,oBAAC,IAAD,EACE,GAAG,CAAEA,KADP,CAEE,KAAK,CAAEA,KAFT,CAGE,IAAI,CAAEI,IAHR,CAIE,YAAY,CAAEL,YAJhB,CAKE,UAAU,CAAEE,UALd,EADS,EAAV,CADH,cAUE,oBAAC,QAAD,EAAU,OAAO,CAAEJ,OAAnB,EAVF,CADF,CADF,CAgBD,CAED,cAAeL,CAAAA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nimport \"./App.css\";\n\n/*\n    Class components have built-in state, but functional componets are stateless.\n\n    React hooks are functions that allow you to \"hook\" into React state and lifecycle features \n    from function components.\n    useState is one of those built-in \"hooks\". Others are useEffect, useContext, use Reducer, useMemo, etc.\n\n    https://reactjs.org/docs/hooks-intro.html\n    https://reactjs.org/docs/hooks-reference.html\n*/\n\n\nfunction App() {\n\n  /*\n      Creating our state with default todos: \n      (todos is the value that holds the state object and setTodos is the function that will update it)\n      You cannot update state directly, only with the setTodos function you define.\n  */\n\n     const [todos, setTodos] = useState([\n    {\n      text: \"Learn about React\",\n      isCompleted: false\n    },\n    {\n      text: \"Meet friend for lunch\",\n      isCompleted: false\n    },\n    {\n      text: \"Build really cool todo app\",\n      isCompleted: false\n    }\n  ]);\n\n  /*\n      Functions to add, update and remove a todo:\n      We are using the spread operator [...] to make a copy of our todos array and then update it.\n      We cannot directly manipulate our todos object, so we replace our exisiting array of todos with a new one.\n  */\n  \n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  // note: map function is used to iterate through todos array. Each item in array needs a \"key\" (using index)\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}